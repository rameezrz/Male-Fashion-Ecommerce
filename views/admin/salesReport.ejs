



<!-- Basic Bootstrap Table -->
<div class="card">
  <div class="table-responsive text-nowrap px-5 py-4">
    
  
  <div class="demo-inline-spacing mt-3">
    <div class="list-group list-group-horizontal-md text-md-center col-6">
      <a
        class="list-group-item list-group-item-action active"
        id="home-list-item"
        data-bs-toggle="list"
        href="#horizontal-home"
        >Daily Report</a
      >
      <a
        class="list-group-item list-group-item-action"
        id="profile-list-item"
        data-bs-toggle="list"
        href="#horizontal-profile"
        >Monthly Report</a
      >
      <a
        class="list-group-item list-group-item-action"
        id="messages-list-item"
        data-bs-toggle="list"
        href="#horizontal-messages"
        >Yearly Report</a
      >
      <a
        class="list-group-item list-group-item-action"
        id="messages-list-item"
        data-bs-toggle="list"
        href="#horizontal-settings"
        >Custom</a
      >
      
    </div>
    <div class="tab-content px-0 mt-0">
      <div class="tab-pane fade show active" id="horizontal-home">
       
        <!-- Bootstrap Table with Caption -->
        <div class="card">
          <div class="card-header d-flex align-items-baseline px-5 justify-content-between py-2">
            <h5 class="">Daily Sales</h5>
            <div>
              Download
              <img src="\admin\assets\img\icons\unicons/pdf.png" alt="" style="width: 40px;" onclick="downloadPdf('<%= JSON.stringify(dailySalesReport[0].salesData) %>')">
              <img src="\admin\assets\img\icons\unicons/excel.png" alt="" style="width: 40px;" onclick="downloadExcel('<%= JSON.stringify(dailySalesReport[0].salesData) %>')">
            </div>
          </div>
          <div class="table-responsive text-nowrap">
            <table class="table text-center">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Orders</th>
                  <th>Revenue</th>
                </tr>
              </thead>
              <tbody>
                <% dailySalesReport[0].salesData.forEach((element) => { %>
                <tr>
                  <td><%= element._id %></td>
                  <td><%= element.totalOrders %></td>
                  <td><%= element.totalSales.toLocaleString(undefined, { style: 'currency', currency: 'INR' }) %></td>
                </tr>
                <% }) %>
                <tr>
                  <td></td>
                  <td></td>
                  <td class="fs-5 fw-bold"><%= dailySalesReport[0].totalSalesAllDays.toLocaleString(undefined, { style: 'currency', currency: 'INR' }) %></td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
        <!-- Bootstrap Table with Caption -->
      </div>
      <div class="tab-pane fade" id="horizontal-profile">
        <div class="card">
          <div class="card-header d-flex align-items-baseline px-5 justify-content-between py-2">
            <h5 class="">Monthly Sales</h5>
            <div>
              Download
              <img src="\admin\assets\img\icons\unicons/pdf.png" alt="" style="width: 40px;" onclick="downloadPdf('<%= JSON.stringify(monthlySalesReport[0].salesData) %>')">
              <img src="\admin\assets\img\icons\unicons/excel.png" alt="" style="width: 40px;" onclick="downloadExcel('<%= JSON.stringify(monthlySalesReport[0].salesData) %>')">
            </div>
          </div>
          <div class="table-responsive text-nowrap">
            <table class="table text-center">
              <thead>
                <tr>
                  <th>Month</th>
                  <th>Orders</th>
                  <th>Revenue</th>
                </tr>
              </thead>
              <tbody>
                <% monthlySalesReport[0].salesData.forEach((element) => { %>
                  <tr>
                    <td>
                      <% 
                        const [month, year] = element._id.split('-');
                        const formattedDate = new Date(Number(year), Number(month) - 1).toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
                        %>
                      <%= formattedDate %>
                    </td>
                    <td><%= element.totalOrders %></td>
                    <td><%= element.totalSales.toLocaleString(undefined, { style: 'currency', currency: 'INR' }) %></td>
                  </tr>
                <% }) %>
                
                <tr>
                  <td></td>
                  <td></td>
                  <td class="fs-5 fw-bold"><%= monthlySalesReport[0].totalSalesAllMonths.toLocaleString(undefined, { style: 'currency', currency: 'INR' }) %></td>
                </tr>
              </tbody>
            </table>
            
          </div>
        </div>
      </div>
      <div class="tab-pane fade" id="horizontal-messages">
        <div class="card">
          <div class="card-header d-flex align-items-baseline px-5 justify-content-between py-2">
            <h5 class="">Yearly Sales</h5>
            <div>
              Download
              <img src="\admin\assets\img\icons\unicons/pdf.png" alt="" style="width: 40px;" onclick="downloadPdf('<%= JSON.stringify(yearlySalesReport[0].salesData) %>')">
              <img src="\admin\assets\img\icons\unicons/excel.png" alt="" style="width: 40px;" onclick="downloadExcel('<%= JSON.stringify(yearlySalesReport[0].salesData) %>')">
            </div>
          </div>
          <div class="table-responsive text-nowrap">
            <table class="table text-center">
              <thead>
                <tr>
                  <th>Year</th>
                  <th>Orders</th>
                  <th>Revenue</th>
                </tr>
              </thead>
              <tbody>
                <% yearlySalesReport[0].salesData.forEach((element) => { %>
                  <tr>
                    <td><%= element._id %></td>
                    <td><%= element.totalOrders %></td>
                    <td><%= element.totalSales.toLocaleString(undefined, { style: 'currency', currency: 'INR' }) %></td>
                  </tr>
                <% }) %>
                
                <tr>
                  <td></td>
                  <td></td>
                  <td class="fs-5 fw-bold"><%= yearlySalesReport[0].totalSalesAllMonths.toLocaleString(undefined, { style: 'currency', currency: 'INR' }) %></td>
                </tr>
              </tbody>
            </table>
            
          </div>
        </div>
      </div>
      <div class="tab-pane fade" id="horizontal-settings">
        <p>Select Date Range</p>
      <div id="reportrange" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 35%">
        <i class="bx bx-calendar"></i>&nbsp;
        <span></span> <i class="bx bx-caret-down"></i>
      </div>
      <div class="card mt-4">
        <div id="customHeader" class="card-header d-flex align-items-baseline px-5 justify-content-between py-2 d-none">
          <h5 class="">Sales between Date Range</h5>
          <div>
            Download
            <img src="\admin\assets\img\icons\unicons/pdf.png" alt="" style="width: 40px;" id="customPdfDownload">
            <img src="\admin\assets\img\icons\unicons/excel.png" alt="" style="width: 40px;" id="customExcelDownload">
          </div>
        </div>
        <div class="table-responsive text-nowrap">
          <table class="table text-center d-none" id="salesTable" >
            <thead>
              <tr>
                <th>Date</th>
                <th>Orders</th>
                <th>Revenue</th>
              </tr>
            </thead>
            <tbody>
                <tr>
                  <td></td>
                  <td></td>
                  <td></td>
                </tr>
            </tbody>
            <tfoot>
              <tr>
                <td colspan="2"></td>
                <td class="fs-5 fw-bold" id="totalSalesCell"></td>
              </tr>
            </tfoot>
          </table>
        </div>
        <p class="text-danger text-center mt-3" id="noDataError"></p>
      </div>
      </div>
      
    </div>
  </div>
</div>
</div>
<!--/ Basic Bootstrap Table -->

<script>

  let salesReportCustom

          document.getElementById('customPdfDownload').addEventListener('click',()=>{
            downloadPdf(salesReportCustom)
          })

          document.getElementById('customExcelDownload').addEventListener('click',()=>{
            downloadExcel(salesReportCustom)
          })

  const downloadPdf = (tableData)=>{
    let data = JSON.parse(tableData)
    const pdfContent = generatePdfContent(data);

  // Create a PDF document
  const pdfDoc = pdfMake.createPdf(pdfContent);

  // Generate a unique filename for the PDF
  const filename = `sales_report_${new Date().toISOString()}.pdf`;

  // Download the PDF
  pdfDoc.download(filename);
  }

  function generatePdfContent(tableData) {
  // Define the table columns and their widths
  const tableColumns = ['Date', 'Orders', 'Revenue'];
  const columnWidths = ['33%', '33%', '33%'];

  // Create an array to hold the table rows
  const tableRows = [];

  // Iterate over the table data and create a row for each entry
  tableData.forEach((data) => {
    const row = [
      { text: data._id, style: 'cell' },
      { text: data.totalOrders.toString(), style: 'cell' },
      { text: formatCurrency(data.totalSales), style: 'cell' },
    ];
    tableRows.push(row);
  });

  // Calculate the total number of orders and total sales
  const totalOrders = tableData.reduce((total, data) => total + data.totalOrders, 0);
  const totalSales = tableData.reduce((total, data) => total + data.totalSales, 0);

  // Add a row for the total number
  const totalRow = [
    { text: 'Total', style: 'totalHeader' },
    { text: totalOrders.toString(), style: 'totalCell' },
    { text: formatCurrency(totalSales), style: 'totalCell' },
  ];
  tableRows.push(totalRow);

  // Create the PDF document definition
  const docDefinition = {
    
    content: [
    {
          text: 'Male Fashion - Sales Report',
          alignment: 'center',
          margin: [0, 0, 0, 40],
          fontSize: 18,
          bold: true,
        },
      {
        style: 'tableContainer',
        table: {
          headerRows: 1,
          widths: columnWidths,
          body: [
            [
              { text: tableColumns[0], style: 'header' },
              { text: tableColumns[1], style: 'header' },
              { text: tableColumns[2], style: 'header' },
            ],
            ...tableRows,
          ],
        },
        layout: {
          fillColor: function (rowIndex, node, columnIndex) {
            return rowIndex % 2 === 0 ? '#f2f2f2' : null;
          },
        },
      },
    ],
    styles: {
      header: {
        bold: true,
        fontSize: 12,
        fillColor: '#ddd',
        alignment: 'center',
        margin: [0, 5, 0, 5],
      },
      cell: {
        fontSize: 10,
        margin: [0, 5, 0, 5],
      },
      totalHeader: {
        bold: true,
        fontSize: 12,
        fillColor: '#ddd',
        alignment: 'center',
        margin: [0, 5, 0, 5],
      },
      totalCell: {
        bold: true,
        fontSize: 10,
        margin: [0, 5, 0, 5],
      },
      tableContainer: {
        alignment: 'center',
      },
    },
    };

  return docDefinition;
}

function formatCurrency(value) {
  return value.toLocaleString(undefined, { style: 'currency', currency: 'INR' });
}

const downloadExcel = (tableData) => {
  // Convert table data to an array of rows
  const parsedData = JSON.parse(tableData);

  // Convert table data to an array of rows
  const rows = [];
  parsedData.forEach((data) => {
    const row = [data._id, data.totalOrders, data.totalSales];
    rows.push(row);
  });

  // Create a new workbook
  const workbook = XLSX.utils.book_new();

  // Convert rows to a worksheet
  const worksheet = XLSX.utils.aoa_to_sheet(rows);

  // Add the worksheet to the workbook
  XLSX.utils.book_append_sheet(workbook, worksheet, 'Sales Report');

  // Generate a unique filename for the Excel file
  const filename = `sales_report_${new Date().toISOString()}.xlsx`;

  // Generate Excel binary data
  const excelData = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });

  // Create a Blob from the Excel data
  const blob = new Blob([excelData], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

  // Create a temporary link element
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = filename;

  // Programmatically click the link to trigger the download
  link.click();

  // Cleanup by revoking the object URL
  URL.revokeObjectURL(link.href);
};






</script>


<script type="text/javascript">
  $(function() {
  var start = moment().subtract(29, 'days');
  var end = moment();

  function cb(start, end) {
    $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
  }

  $('#reportrange').daterangepicker({
    startDate: start,
    endDate: end,
    ranges: {
      'Today': [moment(), moment()],
      'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
      'Last 7 Days': [moment().subtract(6, 'days'), moment()],
      'Last 30 Days': [moment().subtract(29, 'days'), moment()],
      'This Month': [moment().startOf('month'), moment().endOf('month')],
      'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
    }
  }, cb);

  // Event listener for date range selection
  $('#reportrange').on('apply.daterangepicker', function(ev, picker) {
    var startDateISO = picker.startDate.toISOString();
    var endDateISO = picker.endDate.toISOString();

    $.ajax({
    url:'/admin-panel/sales-report/custom',
    method:'post',
    data:{startDateISO,endDateISO},
    success:(response)=>{
      if(response.length){
        document.getElementById('noDataError').innerHTML = ''
        var salesReport = response[0];
        salesReportCustom = JSON.stringify(salesReport.salesData)

        $('#salesTable').removeClass('d-none')
        $('#customHeader').removeClass('d-none')

        // Get the table body element
        var tbody = $('#salesTable tbody');

        // Clear the existing table rows
        tbody.empty();

        // Iterate over the sales data and generate table rows
        salesReport.salesData.forEach(function (data) {
          // Create a new table row
          var row = $('<tr>');

          // Create table cells for each data field
          var dateCell = $('<td>').text(data._id);
          var ordersCell = $('<td>').text(data.totalOrders);
          var revenueCell = $('<td>').text(data.totalSales.toLocaleString(undefined, { style: 'currency', currency: 'INR' }));

          // Append the cells to the row
          row.append(dateCell, ordersCell, revenueCell);

          // Append the row to the table body
          tbody.append(row);

          
        });

        // Update the total sales value
        var totalSalesCell = $('#totalSalesCell');
        totalSalesCell.text(salesReport.totalSalesAllDays.toLocaleString(undefined, { style: 'currency', currency: 'INR' }));
        
      }else{
        var tbody = $('#salesTable');
        $('#salesTable').addClass('d-none')
        $('#customHeader').addClass('d-none')

        // Clear the existing table rows
        tbody.empty();
        document.getElementById('noDataError').innerHTML = 'No Sales data found between selected range.'
      }
      
    }
  });

    console.log('Selected Date Range:', startDateISO, ' - ', endDateISO);
    // Perform any necessary actions with the selected dates
  });

  cb(start, end);
});

  </script>




<script>
  $(document).ready(function() {
   
   var scriptPromise = $.getScript("/admin/libs/data-table/datatables.min.js");
  


scriptPromise.done(function() {
  $('#myTable').DataTable();
});

scriptPromise.fail(function() {
  console.error("Failed to load DataTables script.");
});
});
</script>